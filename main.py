import logging
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import pytz

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7764468557:AAEy1S3TybWK_8t0LIRSVM8t78jjqTqtYL8"

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
LATVIA_TZ = pytz.timezone("Europe/Riga")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç! –Ø —Å —Ç–æ–±–æ–π –Ω–∞ —Å–≤—è–∑–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /about
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø —Ç–≤–æ–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç. –°–∏–≥–Ω–∞–ª—ã, –∞–Ω–∞–ª–∏–∑, –æ–±—É—á–µ–Ω–∏–µ, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ ‚Äî –≤—Å—ë –±—É–¥–µ—Ç."
    )

# –ö–æ–º–∞–Ω–¥–∞ /setmode
async def setmode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mode = context.args[0]
        amount = int(context.args[1])
        leverage = int(context.args[2])
        user_data[update.effective_user.id] = {
            "mode": mode,
            "amount": amount,
            "leverage": leverage,
            "signals": [],
            "current_trade": {},
        }
        await update.message.reply_text(
            f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode.upper()} | –û–±—ä—ë–º: {amount} USDT | –ü–ª–µ—á–æ: x{leverage}"
        )
    except:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /setmode aggressive 300 10")

# –ö–æ–º–∞–Ω–¥–∞ /signal
async def signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    signal_text = " ".join(context.args)
    timestamp = datetime.now(LATVIA_TZ).strftime("%Y-%m-%d %H:%M")
    user_data.setdefault(uid, {}).setdefault("signals", []).append(f"{timestamp} ‚Äî {signal_text}")
    await update.message.reply_text("–°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é.")

# –ö–æ–º–∞–Ω–¥—ã /entry –∏ /exit
async def entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_data.setdefault(uid, {}).setdefault("current_trade", {})["entry"] = update.message.date
    await update.message.reply_text("–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")

async def exit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    trade = user_data.get(uid, {}).get("current_trade", {})
    if "entry" in trade:
        trade["exit"] = update.message.date
        await update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ —Å–¥–µ–ª–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ /entry")

# –ö–æ–º–∞–Ω–¥–∞ /journal
async def journal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    signals = user_data.get(uid, {}).get("signals", [])
    if signals:
        await update.message.reply_text("–°–∏–≥–Ω–∞–ª—ã:
" + "
".join(signals))
    else:
        await update.message.reply_text("–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç, –±—Ä–∞—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ /report
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /lesson (—Ñ–∞–∑–∞ 2)
async def lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(LATVIA_TZ).strftime("%Y-%m-%d")
    await update.message.reply_text(
        f"–£—Ä–æ–∫ –Ω–∞ {today}:

"
        "- –ß—Ç–æ —Ç–∞–∫–æ–µ –æ—Ä–¥–µ—Ä-–±–ª–æ–∫?
"
        "- –ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–æ–Ω—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏?

"
        "–í–æ–ø—Ä–æ—Å: –≥–¥–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ —Å–µ–π—á–∞—Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞?"
    )

# –ö–æ–º–∞–Ω–¥–∞ /autosignal (—Ñ–∞–∑–∞ 3)
async def autosignal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...

"
        "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:
"
        "- –ò–º–±–∞–ª–∞–Ω—Å –Ω–∞ BTC 1H
"
        "- –†–∞—Å–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å ETH
"
        "- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –≤—Ö–æ–¥–∞: LONG BTC –æ—Ç 66500

"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å? –ñ–¥—É –∫–æ–º–∞–Ω–¥—É /entry –µ—Å–ª–∏ –≤—Ö–æ–¥–∏—à—å."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É, –±—Ä–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /about.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("setmode", setmode))
    app.add_handler(CommandHandler("signal", signal))
    app.add_handler(CommandHandler("entry", entry))
    app.add_handler(CommandHandler("exit", exit))
    app.add_handler(CommandHandler("journal", journal))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("lesson", lesson))
    app.add_handler(CommandHandler("autosignal", autosignal))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    app.run_polling()

if __name__ == "__main__":
    main()
